#version 430 core

struct Shape
{
	vec3 A;
	uint type;//Sphere/Cube/RECT...
	vec3 B;
	uint param;	//Rotation degree (cube) or axis (rect)
	float density;
};

struct Material
{
	vec3 albedo;
	float param;
	vec3 emissive;
	uint type;//Lambert/Metal/Dielecric
};

//整个材质与纹理进行绑定
struct InputShape
{
	Shape S;
	Material M;
};

// Layouts
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding=0) uniform image2D img_output;
layout(std430, binding=1) buffer rngstatebuf 
{
	uint state[];
};
layout (std430, binding=2) readonly buffer objbuf 
{
	InputShape input_obj[];
};
layout (rgba8, binding=3) readonly uniform imageCube sky;

// Constants
const int MAX_DEPTH = 25;
const float INV_UINT_MAX = (1.0f/4294967296.0);//用于随机数

// Enums
// Material
const uint MAT_LAMBERT = 0x00000001u;
const uint MAT_METAL = 0x00000002u;
const uint MAT_DIELECRIC = 0x00000003u;

// Shape
const uint SHP_SPHERE = 0x00000001u;
const uint SHP_CUBE = 0x00000002u;
const uint SHP_RECT	= 0x00000003u;
const uint SHP_ISOTROPIC = 0xF0000000u;
const uint SHP_PRIMITIVE_MASK = 0x0000FFFFu;
const uint SHP_SECONDARY_MASK = 0xFFFF0000u;

// Axis
const uint AXIS_X = 0x00000000u;
const uint AXIS_Y = 0x00000001u;
const uint AXIS_Z = 0x00000002u;

const float TMIN = 1e-8f;
const float TMAX = 1000.0f;

uniform struct Camera
{
	vec3 lower_left;
	vec3 horz;
	vec3 vert;
	vec3 origin;
	float lens_radius;
} cam;

uniform int iteration;
uniform ivec2 chunk;
uniform bool skybox_active;

struct Ray
{
	vec3 A;//光源
	vec3 B;//朝向
};

vec3 RandomInUnitSphere();
vec2 RandomInUnitDisk();
vec4 Color(Ray r);
Ray GetRay(Camera cam, float x, float y);

//制造一个随机数[0,1)
float rng();
void rngseed(uint seed);
uint rngstate();
uint hash(uint seed);

void main()
{
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy) + chunk;
	ivec2 dims = imageSize(img_output);
	ivec2 skysize = imageSize(sky);

	vec4 img = imageLoad(img_output, pixel_coords);

	rngseed(state[pixel_coords.y * dims.x + pixel_coords.x]);

	float x = (pixel_coords.x + rng())/float(dims.x);
	float y = (pixel_coords.y + rng())/float(dims.y);
	Ray r = GetRay(cam, x, y);
	vec4 pixel = (Color(r)+ iteration * img)*(1.0f/(1.0f + iteration));

	imageStore(img_output, pixel_coords, pixel);
	state[pixel_coords.y * dims.x + pixel_coords.x] = rngstate();
}

//得到一条从相机直线
Ray GetRay(Camera cam, float x, float y)
{
	vec2 rd = cam.lens_radius * RandomInUnitDisk();
	vec3 offset = normalize(cam.horz) * rd.x + normalize(cam.vert) * rd.y;
	Ray r = {cam.origin + offset, (cam.lower_left + x*cam.horz + y*cam.vert - offset - cam.origin)};
	return r;
}

struct HitInfo
{
	bool hit;
	vec3 hitpoint;
	float t;//光线击中时的t值
	vec3 normal;
	Ray r;//记录反射光线
	Material m;
};

//在Lambert材质上的反射
vec3 ScatterLambert(inout HitInfo hit)
{
	hit.r.A = hit.hitpoint;
	hit.r.B = hit.normal + RandomInUnitSphere();
	hit.hit = dot(hit.r.B,hit.normal) > 0.0f;
	return (hit.hit) ? hit.m.albedo : vec3(0.0f);
}

//镜面反射中反射光线方向
vec3 custom_reflect(vec3 I, vec3 N)
{
	return (I - 2 * dot(I, normalize(N)) * normalize(N));
}

//在金属材质上的反射
vec3 ScatterMetal(inout HitInfo hit)
{
	hit.r.A = hit.hitpoint;
	hit.r.B = normalize(custom_reflect(hit.r.B,hit.normal)) + 0.2f * RandomInUnitSphere() * hit.m.param;
	hit.hit = dot(hit.r.B,hit.normal) > 0.0f;
	return (hit.hit) ? hit.m.albedo : vec3(0.0f);
}

//使得折射介质能够随着角度的不同有不同的折射率
float schlick(float cosine, float ri)
{
	float r0 = (1.0f-ri)/(1.0f+ri);
	r0 = r0*r0;
	float anticos = (1.0f-cosine);
	return r0 + (1.0f - r0)*anticos*anticos*anticos*anticos*anticos;
}

//电介质的折射
vec3 refract_dielectric(vec3 v, vec3 norm, float nu, float refl_prob)
{
	vec3 uv = normalize(v);//入射光线方向归一化
	float dt = dot(uv,norm);//入射光线与法线作点积，得到结果即为-cosC，C为入射角（点积结果恒为负值）
	float disc = 1.0f - nu*nu*(1.0f-dt*dt);//判定是否发生全反射
	if (disc > 0.0f && rng() > refl_prob)//未发生全反射
		return nu*(uv - norm*dt) - norm*sqrt(disc);//得到折射光线方向
	else
		return custom_reflect(uv, norm);//返回正常全反射的光线方向
}

//折射介质的反射光线
vec3 ScatterDielectric(inout HitInfo hit) {
	vec3 norm;
	float nu;//两个光介质之比（入射光介质：出射光介质）
	float cosine;
	if (dot(hit.normal, hit.r.B) > 0)//从球体内射出（光密射光疏，可能全反射）
	{
		norm = -hit.normal;
		nu = hit.m.param;
		cosine = hit.m.param * dot(normalize(hit.r.B), hit.normal);
	} 
	else//从球体外射入（光密射光密，不可能有全反射）
	{
		norm = hit.normal;
		nu = 1.0f/hit.m.param;
		cosine = -dot(normalize(hit.r.B), hit.normal);
	}

	float ref_prob = schlick(cosine, hit.m.param);

	hit.r.A = hit.hitpoint;
	hit.r.B = refract_dielectric(hit.r.B, norm, nu, ref_prob);

	return hit.m.albedo;
}

//没有击中这三种Lambert/Metal/Dielecric材质的
vec3 ScatterIso(inout HitInfo hit)
{
	float r = rng();

	hit.r.A = hit.hitpoint;
	hit.r.B = RandomInUnitSphere();
	hit.hit = true;
	return hit.m.albedo;
}

vec3 Scatter(inout HitInfo hit)
{
	if (hit.m.type == MAT_LAMBERT)
		return ScatterLambert(hit);
	else if (hit.m.type == MAT_METAL)
		return ScatterMetal(hit);
	else if (hit.m.type == MAT_DIELECRIC)
		return ScatterDielectric(hit);
	else
		return ScatterIso(hit);
}

//判断是否击中球体的情况和数据
HitInfo HitSphere(Shape s, Ray r, float tmin)
{
	vec3 oc = r.A - s.A;
	float a = dot(r.B, r.B);
	float b = 2.0f * dot(oc, r.B);
	float c = dot(oc, oc) - s.B.x*s.B.x;
	float disc = b*b - 4*a*c;
	HitInfo h;
	h.hit = (disc > 0.0f);
	if (!h.hit)
		return h;
	h.t = (-b - sqrt(disc))/(2.0f*a);
	float t2 = (-b + sqrt(disc))/(2.0f*a);
	if (h.t < tmin)
	{
		h.t = t2;
		if (h.t < tmin)
		{
			h.hit = false;
			return h;
		}
	}

	if ((s.type & SHP_SECONDARY_MASK) == SHP_ISOTROPIC)
	{
		float d = abs(t2 - h.t) * length(r.B);
		float hit_d = -(1.0f/s.density)*log(rng());
		if (hit_d < d)
		{
			h.t = h.t + (hit_d / length(r.B));
			h.hitpoint = r.A + h.t*r.B;
		}
		else
			h.hit = false;
	}
	else
	{
		h.hitpoint = r.A + h.t * r.B;
		h.normal = (h.hitpoint - s.A)/s.B.x;
	}
	return h;
}

HitInfo HitRectXY(float sAx, float sAy, float sBx, float sBy, float z, Ray r, float normal)
{
	HitInfo h;
	float t = (z - r.A.z)/r.B.z;
	float x = r.A.x + r.B.x * t;
	float y = r.A.y + r.B.y * t;
	
	if (x < sAx || x > sBx+sAx || y < sAy || y > sBy+sAy)
	{
		h.hit = false;
		h.t = t;
		return h;
	}

	h.hit = true;
	h.hitpoint = r.A + t*r.B;
	h.normal = vec3(0,0,normal);
	h.t = t;
	return h;
}

HitInfo HitRectYZ(float sAy, float sAz, float sBy, float sBz, float x, Ray r, float normal)
{
	HitInfo h;
	float t = (x - r.A.x)/r.B.x;
	float z = r.A.z + r.B.z * t;
	float y = r.A.y + r.B.y * t;
	
	if (z < sAz || z > sBz+sAz || y < sAy || y > sBy+sAy)
	{
		h.hit = false;
		h.t = t;
		return h;
	}

	h.hit = true;
	h.hitpoint = r.A + t*r.B;
	h.normal = vec3(normal,0,0);
	h.t = t;
	return h;
}

HitInfo HitRectXZ(float sAx, float sAz, float sBx, float sBz, float y, Ray r, float normal)
{
	HitInfo h;
	float t = (y - r.A.y)/r.B.y;
	float z = r.A.z + r.B.z * t;
	float x = r.A.x + r.B.x * t;
	
	if (z < sAz || z > sBz+sAz || x < sAx || x > sBx+sAx)
	{
		h.hit = false;
		h.t = t;
		return h;
	}

	h.hit = true;
	h.hitpoint = r.A + t*r.B;
	h.normal = vec3(0,normal,0);
	h.t = t;
	return h;
}

vec3 rotateXZ(vec3 a, float angle)
{
	return vec3(cos(angle)*a.x - sin(angle)*a.z, a.y, sin(angle)*a.x + cos(angle)*a.z);
}

HitInfo HitCuboid(Shape s, Ray r, float tmin)
{
	// Can add s.param != 0
	float theta = s.param/1000.0f;
	vec3 center = (s.A + s.B)*0.5f;
	vec3 A = center + rotateXZ(r.A-center, -theta);
	vec3 B = center + rotateXZ(r.B + r.A - center, -theta) - A;

	r = Ray(A,B);
	HitInfo h;
	HitInfo hmin;
	HitInfo hmax;
	h = HitRectXY(s.A.x, s.A.y, s.B.x, s.B.y, s.A.z, r, -1);
	hmin = h;
	hmax = h;
	h = HitRectXY(s.A.x, s.A.y, s.B.x, s.B.y, s.A.z + s.B.z, r, 1);
	if (h.hit && h.t < hmin.t) hmin = h;
	if (h.hit && h.t > hmax.t) hmax = h;
	h = HitRectYZ(s.A.y, s.A.z, s.B.y, s.B.z, s.A.x, r, -1);
	if (h.hit && h.t < hmin.t) hmin = h;
	if (h.hit && h.t > hmax.t) hmax = h;
	h = HitRectYZ(s.A.y, s.A.z, s.B.y, s.B.z, s.A.x + s.B.x, r, 1);
	if (h.hit && h.t < hmin.t) hmin = h;
	if (h.hit && h.t > hmax.t) hmax = h;
	h = HitRectXZ(s.A.x, s.A.z, s.B.x, s.B.z, s.A.y, r, -1);
	if (h.hit && h.t < hmin.t) hmin = h;
	if (h.hit && h.t > hmax.t) hmax = h;
	h = HitRectXZ(s.A.x, s.A.z, s.B.x, s.B.z, s.A.y + s.B.y, r, 1);
	if (h.hit && h.t < hmin.t) hmin = h;
	if (h.hit && h.t > hmax.t) hmax = h;

	h = hmin;
	if (hmin.t < tmin)
	{
		hmin = hmax;
		hmax = h;
	}
	if (hmin.t < tmin)
	{
		hmin.hit = false;
		return hmin;
	}

	if ((s.type & SHP_SECONDARY_MASK) == SHP_ISOTROPIC)
	{
		float d = abs(hmax.t - hmin.t) * length(r.B);
		float hit_d = -(1.0f/s.density)*log(rng());
		if (hit_d < d)
		{
			hmin.t = hmin.t + (hit_d / length(r.B));
			hmin.hitpoint = r.A + hmin.t*r.B;
		}
		else
			hmin.hit = false;
	} 
	else 
	{
		hmin.normal = rotateXZ(hmin.normal, theta);
		hmin.hitpoint = center + rotateXZ(hmin.hitpoint - center, theta);
	}

	return hmin;
}

HitInfo HitShape(Shape s, Ray r, float tmin) {
	switch (s.type & SHP_PRIMITIVE_MASK) {
		case SHP_SPHERE: {
			return HitSphere(s,r,tmin);
		}; break;
		case SHP_CUBE: {
			return HitCuboid(s,r,tmin);
		}; break;
		case SHP_RECT: {
			HitInfo h;
			switch (s.param) {
				case AXIS_X: {
					h = HitRectYZ(s.A.y, s.A.z, s.B.y, s.B.z, s.A.x, r, sign(s.B.x));
					if (h.t < tmin) h.hit = false;
				}; break;
				case AXIS_Y: {
					h = HitRectXZ(s.A.x, s.A.z, s.B.x, s.B.z, s.A.y, r, sign(s.B.y));
					if (h.t < tmin) h.hit = false;
				}; break;
				case AXIS_Z: {
					h = HitRectXY(s.A.x, s.A.y, s.B.x, s.B.y, s.A.z, r, sign(s.B.z));
					if (h.t < tmin) h.hit = false;
				}; break;
			}
			return h;
		}; break;
		default: {
			return HitSphere(s,r,tmin);
		}; break;
	}
}

//在世界空间中是否击中了物体
HitInfo WorldHit(Ray r, float tmin, float tmax) {
	HitInfo hmin;
	hmin.hit = false;
	hmin.t = tmax;
	int n = input_obj.length();
	for (int i = 0; i < n; i++)
	{
		HitInfo h = HitShape(input_obj[i].S, r, tmin);
		if (h.hit)
		{
			if (hmin.t > h.t)
			{
				hmin = h;
				hmin.m = input_obj[i].M;
			}
		}
	}
	hmin.r = r;
	return hmin;
}

vec3 skyboxSample(vec3 coord)
{
	// MA can be 0,1,2,3,4,5
	int MA;
	vec3 sctcma;
	vec3 absc = abs(coord);
	if (absc.x > absc.y)
	{
		if (absc.x > absc.z)
		{
			if (coord.x < 0)
			{
				MA = 1;
				sctcma = vec3( coord.z, -coord.y, 1.0f/abs(coord.x));
			}
			else
			{
				MA = 0;
				sctcma = vec3(-coord.z, -coord.y, 1.0f/abs(coord.x));
			}
		}
		else
		{
			if (coord.z < 0)
			{
				MA = 5;
				sctcma = vec3(-coord.x, -coord.y, 1.0f/abs(coord.z));
			}
			else
			{
				MA = 4;
				sctcma = vec3( coord.x, -coord.y, 1.0f/abs(coord.z));
			}
		}
	}
	else
	{
		if (absc.y > absc.z)
		{
			if (coord.y < 0)
			{
				MA = 3;
				sctcma = vec3(coord.x, -coord.z, 1.0f/abs(coord.y));
			}
			else
			{
				MA = 2;
				sctcma = vec3(coord.x, coord.z, 1.0f/abs(coord.y));
			}
		}
		else
		{
			if (coord.z < 0)
			{
				MA = 5;
				sctcma = vec3(-coord.x, -coord.y, 1.0f/abs(coord.z));
			}
			else
			{
				MA = 4;
				sctcma = vec3( coord.x, -coord.y, 1.0f/abs(coord.z));
			}
		}
	}

	ivec2 imgSize = imageSize(sky);
	ivec3 texco = ivec3(0.5f * (sctcma.x * sctcma.z + 1) * imgSize.x, 0.5f * (sctcma.y * sctcma.z + 1) * imgSize.y, MA);

	return imageLoad(sky, texco).rgb;
}

//光线追踪核心，对于颜色进行
vec4 Color(Ray r) 
{
	vec3 A = vec3(0);
	vec3 M = vec3(1);
	int depth;
    //glsl中不支持递归，所以在这里使用迭代的方法进行处理
    //hit之后HitInfo会记录击中后散射出去的光线的源和方向，同时把得到的颜色增量进行叠加
	for (depth = 0; depth < MAX_DEPTH; depth++)
	{
		HitInfo h = WorldHit(r, 0.001f, 1000.0f);
		if (h.hit)
		{
			A = A + M * h.m.emissive;
			M = M * Scatter(h);
			if (!h.hit) break;
			r = h.r;
		} 
		else//如果光线没有击中，把r的方向进行归一化，进行与背景的混色操作
		{
			float t = 0.5f * (normalize(r.B).y + 1.0f);
			M = M * ((skybox_active)? skyboxSample(r.B) : vec3(0.0f));//是否混入skybox的颜色
			depth++;
			break;
		}
	}
	return vec4(A+M, 1.0f);
}

//构建随机点
//-------------------------------------
//单位球体内的随机点
vec3 RandomInUnitSphere()
{
	vec3 point = vec3(1.0f);
	do {
		point = vec3(2.0f*rng()-1.0f,2.0f*rng()-1.0f,2.0f*rng()-1.0f);
		// attenuating radius so that the distribution eventually lies inside the sphere. Avoid inf loop.
	} while (length(point) >= 1.0f);

	return point;
}
//单位圆内的随机点
vec2 RandomInUnitDisk()
{
	vec2 point = vec2(1.0f);
	do {
		point = vec2(2.0f*rng()-1.0f,2.0f*rng()-1.0f);
	} while (length(point) >= 1.0f);

	return point;
}
//-------------------------------------

//随机数生成
//-------------------------------------------
uint hash(uint seed)
{	
	seed = (seed ^ 61) ^ (seed >> 16); 
	seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

uint rng_state;

uint rngstate()
{
	return rng_state;
}

void rngseed(uint seed) 
{
	rng_state = seed;
}

uint rand_xor()
{
	rng_state ^= (rng_state << 13);
	rng_state ^= (rng_state >> 17);
	rng_state ^= (rng_state << 5);
	return hash(rng_state);
}

float rng()
{
	return rand_xor() * INV_UINT_MAX;//对随机数进行小扰动
}
//---------------------------------------------